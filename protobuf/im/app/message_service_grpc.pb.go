// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: im/app/message_service.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_SingleMessage_FullMethodName = "/icuc.im.app.MessageService/SingleMessage"
	MessageService_GroupMessage_FullMethodName  = "/icuc.im.app.MessageService/GroupMessage"
	MessageService_ImageMessage_FullMethodName  = "/icuc.im.app.MessageService/ImageMessage"
	MessageService_FileMessage_FullMethodName   = "/icuc.im.app.MessageService/FileMessage"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	// 单人消息
	SingleMessage(ctx context.Context, in *SingleMessageRequest, opts ...grpc.CallOption) (*SingleMessageResponse, error)
	// 群消息
	GroupMessage(ctx context.Context, in *GroupMessageRequest, opts ...grpc.CallOption) (*GroupMessageResponse, error)
	// 图片消息
	ImageMessage(ctx context.Context, in *ImageMessageRequest, opts ...grpc.CallOption) (*ImageMessageResponse, error)
	// 文件消息
	FileMessage(ctx context.Context, in *FileMessageRequest, opts ...grpc.CallOption) (*FileMessageResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SingleMessage(ctx context.Context, in *SingleMessageRequest, opts ...grpc.CallOption) (*SingleMessageResponse, error) {
	out := new(SingleMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_SingleMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GroupMessage(ctx context.Context, in *GroupMessageRequest, opts ...grpc.CallOption) (*GroupMessageResponse, error) {
	out := new(GroupMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_GroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ImageMessage(ctx context.Context, in *ImageMessageRequest, opts ...grpc.CallOption) (*ImageMessageResponse, error) {
	out := new(ImageMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_ImageMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) FileMessage(ctx context.Context, in *FileMessageRequest, opts ...grpc.CallOption) (*FileMessageResponse, error) {
	out := new(FileMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_FileMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	// 单人消息
	SingleMessage(context.Context, *SingleMessageRequest) (*SingleMessageResponse, error)
	// 群消息
	GroupMessage(context.Context, *GroupMessageRequest) (*GroupMessageResponse, error)
	// 图片消息
	ImageMessage(context.Context, *ImageMessageRequest) (*ImageMessageResponse, error)
	// 文件消息
	FileMessage(context.Context, *FileMessageRequest) (*FileMessageResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) SingleMessage(context.Context, *SingleMessageRequest) (*SingleMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleMessage not implemented")
}
func (UnimplementedMessageServiceServer) GroupMessage(context.Context, *GroupMessageRequest) (*GroupMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMessage not implemented")
}
func (UnimplementedMessageServiceServer) ImageMessage(context.Context, *ImageMessageRequest) (*ImageMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageMessage not implemented")
}
func (UnimplementedMessageServiceServer) FileMessage(context.Context, *FileMessageRequest) (*FileMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileMessage not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_SingleMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SingleMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SingleMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SingleMessage(ctx, req.(*SingleMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GroupMessage(ctx, req.(*GroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ImageMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ImageMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ImageMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ImageMessage(ctx, req.(*ImageMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_FileMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).FileMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_FileMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).FileMessage(ctx, req.(*FileMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "icuc.im.app.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleMessage",
			Handler:    _MessageService_SingleMessage_Handler,
		},
		{
			MethodName: "GroupMessage",
			Handler:    _MessageService_GroupMessage_Handler,
		},
		{
			MethodName: "ImageMessage",
			Handler:    _MessageService_ImageMessage_Handler,
		},
		{
			MethodName: "FileMessage",
			Handler:    _MessageService_FileMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im/app/message_service.proto",
}
